plugins {
	id 'fabric-loom' version '1.6-SNAPSHOT'
	id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

repositories {
	maven {
		name "Parchment"
		url "https://maven.parchmentmc.org"
	}

	maven {
		name "Cloth Config"
		url "https://maven.shedaniel.me/"
	}

	maven {
		name "Modmenu"
		url "https://maven.terraformersmc.com/"
	}
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	mappings loom.layered() {
		officialMojangMappings()
	}

	//Cloth Config
	modApi("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config_version}") {
		exclude (group: "net.fabricmc.fabric-api") }

	//Modmenu
	modImplementation("com.terraformersmc:modmenu:${project.modmenu_version}") {
		exclude group: "net.fabricmc.fabric-api" }
}

sourceSets.main.resources {
	srcDir 'src/generated/resources'
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 21
}

java {
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

remapJar {
	input.set jar.archiveFile
	dependsOn jar
}

loom {
	accessWidenerPath = file("src/main/resources/lootr.accessWidener")
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			artifact remapJar
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}

			artifactId = "lootr"
		}
	}

	repositories {
		maven {
			url "file:///" + System.getenv("local_maven")
		}
	}
}

idea {
	// Tell IDEA to always download sources/javadoc artifacts from maven.
	module {
		downloadJavadoc = true
		downloadSources = true
	}
}

apply from: 'curseforge.gradle'