def generatedResources = file("src/generated")

sourceSets {
    main {
        resources.srcDir generatedResources
    }
}

dependencies {
    // REQUIRED
    // We depend on fabric loader here to use the fabric @Environment annotations and get the mixin dependencies
    // Do NOT use other classes from fabric loader
    modImplementation("net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}")

    implementation(annotationProcessor("io.github.llamalad7:mixinextras-common:${rootProject.mixin_extras}"))

    // COMPAT
    modCompileOnly("me.shedaniel.cloth:cloth-config-fabric:${rootProject.cloth_config}")
}

architectury {
    common("fabric", "neoforge")
}

loom {
    accessWidenerPath = file("src/main/resources/lootr.accesswidener")
}

jar {
    exclude "architectury.common.json"

    manifest {
        attributes 'Fabric-Loom-Remap': true
    }
}

sourcesJar {
    exclude "architectury.common.json"
}

def ENV = System.getenv()

publishing {
}

task buildAndRelease{}
tasks.build.mustRunAfter tasks.clean
tasks.publish.mustRunAfter tasks.build
tasks.buildAndRelease.dependsOn(tasks.clean, tasks.build, tasks.publish)
