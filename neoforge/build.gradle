plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}
architectury {
    platformSetupLoomIde()
    neoForge()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    neoForge {
        runs {
            all {}

            data {
                data()
                programArgs("--all", "--mod", "lootr")
                programArgs("--existing", project(":common").file("src/main/resources").absolutePath)
                programArgs("--output", project(":common").file("src/generated/resources").absolutePath)
            }
        }
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common
}

dependencies {
    // REQUIRED
    neoForge "net.neoforged:neoforge:${rootProject.neoforge_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionNeoForge")) { transitive = false }

    //modRuntimeOnly("mezz.jei:jei-${project.jei_mc}-neoforge:${project.jei}")
    //modRuntimeOnly("mezz.jei:jei-${project.jei_mc}-common:${project.jei}")

    //modRuntimeOnly("dev.emi:emi-neoforge:${emi}")

    //modRuntimeOnly("me.shedaniel.cloth:cloth-config-neoforge:${project.cloth_config}")
    //modRuntimeOnly("dev.architectury:architectury-neoforge:${project.architectury}")

    // modRuntimeOnly("com.telepathicgrunt:CommandStructures-Neoforge:${project.commandstructures_neoforge}")
    // modRuntimeOnly("com.telepathicgrunt:StructureVoidToggle-Neoforge:${project.structurevoidtoggle_neoforge}")
}

processResources {
    from(project(":common").sourceSets["main"].resources)

    inputs.property "version", project.version

    filesMatching("META-INF/neoforge.mods.toml") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set("dev-shadow")
}

remapJar {
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set(null)
    atAccessWideners.add("${rootProject.mod_id}.accesswidener") // this is a path inside the mod jar
}

jar {
    archiveClassifier.set("dev")
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

def ENV = System.getenv()

publishing {
}

task buildAndRelease{}
tasks.build.mustRunAfter tasks.clean
tasks.publish.mustRunAfter tasks.build
tasks.publishMods.mustRunAfter tasks.publish
tasks.buildAndRelease.dependsOn(tasks.clean, tasks.build, tasks.publish, tasks.publishMods)
